name: ðŸš€ Deploy Django Backend to EC2

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'         # Include backend changes
      - '.github/workflows/deploy-backend.yml' # Include workflow changes
      - '!frontend/**'       # Exclude frontend changes

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      DB_HOST:     ${{ secrets.RDS_HOST }}
      DB_NAME:     ${{ secrets.RDS_NAME }}
      DB_USER:     ${{ secrets.RDS_USER }}
      DB_PASSWORD: ${{ secrets.RDS_PASSWORD }}
      DB_PORT:     ${{ secrets.RDS_PORT }}

    steps:
      - uses: actions/checkout@v4

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          printf "%s\n" "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Install rsync
        run: sudo apt-get update && sudo apt-get install -y rsync

      - name: Sync code to EC2
        run: |
          rsync -avz \
            -e "ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -p ${{ secrets.EC2_PORT }}" \
            --exclude='venv/' \
            --exclude='.git/' \
            --exclude='frontend/' \
            backend/ ubuntu@${{ secrets.EC2_HOST }}:~/app/

      - name: Deploy on EC2
        run: |
            ssh -o StrictHostKeyChecking=no \
                -i ~/.ssh/id_rsa \
                -p ${{ secrets.EC2_PORT }} \
                ubuntu@${{ secrets.EC2_HOST }} << 'DEPLOY'
            set -e
            cd ~/app
            
            # Debug: Show current directory contents
            echo "Current directory: $(pwd)"
            ls -la
            
            # Ensure Python environment is ready
            sudo apt-get update
            sudo apt-get install -y python3-venv python3-pip
            
            # Virtualenv setup with explicit Python path
            if [ ! -d venv ]; then
            echo "Creating new virtual environment..."
            python3 -m venv venv --clear
            source venv/bin/activate
            python -m pip install --upgrade pip wheel
            else
            echo "Using existing virtual environment..."
            source venv/bin/activate
            fi
            
            # Debug: Show Python and pip versions
            echo "Python: $(python --version)"
            echo "Pip: $(pip --version)"
            
            # Install dependencies
            pip install -r requirements.txt
            
            # Django setup
            python manage.py migrate --noinput
            python manage.py collectstatic --noinput
            
            # Restart services with verification
            sudo systemctl daemon-reload
            sudo systemctl restart gunicorn
            sudo systemctl restart nginx
            
            # Verify services are running
            sudo systemctl is-active gunicorn || { echo "Gunicorn failed to start"; exit 1; }
            sudo systemctl is-active nginx || { echo "Nginx failed to start"; exit 1; }
            DEPLOY

      - name: Verify deployment
        run: |
            ssh -i ~/.ssh/id_rsa \
                -o StrictHostKeyChecking=no \
                -p ${{ secrets.EC2_PORT }} \
                ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
                curl -sf http://localhost:8000/health-check/ || { echo 'Django failed to start'; exit 1; }
                EOF
